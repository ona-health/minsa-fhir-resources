map "http://fhir.zeir.smartregister.org/fhir/StructureMap/13038625" = 'RecordChildRecurringService'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group ExtractEncounter(source src: QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.entry as entry, entry.resource = create("Encounter") as encounter then {
        src -> encounter.id = uuid(),
            encounter.status = "finished",
            encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home"),
            encounter.priority = cc("http://terminology.hl7.org/ValueSet/v3-ActPriority", "EL", "Elective") as encounterPriority,
            encounterPriority.text = "Elective" "r_en_static";
        src -> encounter.subject = evaluate(src, $this.subject) "r_en_sub";
        src -> encounter.period = create("Period") as period then {
            src -> period.start = evaluate(src, now()) "r_start";
            src -> period.end = evaluate(src, now()) "r_end";
        } "r_period";

        src -> encounter.type = create('CodeableConcept') as reason then {
            src -> reason.coding = create("Coding") as coding then {
                src -> coding.system = "http://snomed.info/sct", coding.display = evaluate(src, $this.item.where(linkId = 'task-name').answer.value), coding.code = evaluate(src, $this.item.where(linkId = 'task-code').answer.value)  "r_en_type_code_coding";
            } "r_en_type_code";
            src -> reason.text = evaluate(src, $this.item.where(linkId = 'task-name').answer.value) "r_en_type_text";
        } "r_en_type";


        src -> encounter.reasonCode = create('CodeableConcept') as reason then {
            src -> reason.coding = create("Coding") as coding then {
                src -> coding.system = "http://snomed.info/sct", coding.display = evaluate(src, $this.item.where(linkId = 'task-name').answer.value), coding.code = evaluate(src, $this.item.where(linkId = 'task-code').answer.value)  "r_en_code_coding";
            } "r_en_reason_code";
            src -> reason.text = evaluate(src, $this.item.where(linkId = 'task-name').answer.value) "r_en_reason_text";
        } "r_en_reason";
        src -> encounter.participant = create("Encounter_Participant") as partComp then {
            src -> partComp.individual = create("Reference") as encOwner then {
                src -> encOwner.reference = evaluate(src, "Practitioner/" + $this.meta.tag.where($this.system = "https://smartregister.org/practitioner-tag-id").code) "r_enc_part_reference";
            } "r_enc_part_individual";
        } "r_enc_part_component";
    } "r_encounter";
}
